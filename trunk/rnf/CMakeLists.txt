PROJECT(ROSSNET)
CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

OPTION(WITH_ALL		  "Link all modules"		OFF)
OPTION(WITH_IP		  "IP Module" 	   		ON)
OPTION(WITH_TCP 	  "TCP Module" 			ON)
OPTION(WITH_EPI 	  "EPI Module" 			OFF)
OPTION(WITH_OSPF	  "OSPF Module" 		OFF)
OPTION(WITH_BGP		  "BGP Module"			OFF)
OPTION(WITH_FTP		  "FTP Module"			OFF)
OPTION(WITH_PHOLD	  "PHOLD Module"		OFF)
OPTION(WITH_MULTICAST	  "Multicast Module"		OFF)
OPTION(WITH_TLM		  "TLM Module"			OFF)
OPTION(WITH_RANDOM_WALK   "Random walk module"		OFF)
OPTION(WITH_ROBOT_PHYSSYM "Robot Physsym module"	OFF)
OPTION(WITH_WIFI_MAC	  "Wifi Mac Layer module" 	OFF)

SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OPTIONS}")

SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DROSS_QUEUE_${QUEUE}")

SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DROSS_MAPPING_${MAPPING}")

SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DROSS_RAND_${RAND}")

IF(MEMORY)
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DROSS_MEMORY")
ENDIF(MEMORY)

SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DROSS_NETWORK_${NETWORK}")

SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DROSS_CLOCK_${CLOCK}")

SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DROSS_GVT_${GVT}")

IF(TIMING)
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DROSS_timing")
ENDIF(TIMING)

IF(WITH_ALL)
	SET(WITH_IP ON)
	SET(WITH_TCP ON)
	SET(WITH_EPI ON)
	SET(WITH_OSPF ON)
	SET(WITH_BGP ON)
	SET(WITH_FTP ON)
	SET(WITH_PHOLD ON)
	SET(WITH_MULTICAST ON)
	SET(WITH_TLM ON)
	SET(WITH_RANDOM_WALK ON)
ENDIF(WITH_ALL)

IF(WITH_IP)
	SET(HAVE_IP_H ON)
	INCLUDE_DIRECTORIES(${ROSSNET_SOURCE_DIR}/modules/network/ip)
ENDIF(WITH_IP)

IF(WITH_TCP)
	SET(HAVE_TCP_H ON)
	INCLUDE_DIRECTORIES(${ROSSNET_SOURCE_DIR}/modules/transport/tcp)
ENDIF(WITH_TCP)

IF(WITH_EPI)
	SET(HAVE_EPI_H ON)
	INCLUDE_DIRECTORIES(${ROSSNET_SOURCE_DIR}/modules/application/epi)
ENDIF(WITH_EPI)

IF(WITH_OSPF)
	SET(HAVE_OSPF_H ON)
	INCLUDE_DIRECTORIES(${ROSSNET_SOURCE_DIR}/modules/network/ospfv2)
ENDIF(WITH_OSPF)

IF(WITH_BGP)
	SET(HAVE_BGP_H ON)
	INCLUDE_DIRECTORIES(${ROSSNET_SOURCE_DIR}/modules/network/bgp4)
ENDIF(WITH_BGP)

IF(WITH_FTP)
	SET(HAVE_FTP_H ON)
	INCLUDE_DIRECTORIES(${ROSSNET_SOURCE_DIR}/modules/application/ftp)
ENDIF(WITH_FTP)

IF(WITH_PHOLD)
	SET(HAVE_PHOLD_H ON)
	INCLUDE_DIRECTORIES(${ROSSNET_SOURCE_DIR}/modules/application/phold)
ENDIF(WITH_PHOLD)

IF(WITH_MULTICAST)
	SET(HAVE_MULTICAST_H ON)
	INCLUDE_DIRECTORIES(${ROSSNET_SOURCE_DIR}/modules/network/multicast)
ENDIF(WITH_MULTICAST)

IF(WITH_TLM)
	SET(HAVE_TLM_H ON)
	INCLUDE_DIRECTORIES(${ROSSNET_SOURCE_DIR}/modules/physical/tlm)
ENDIF(WITH_TLM)

IF(WITH_RANDOM_WALK)
	SET(HAVE_RANDOM_WALK_H ON)
	INCLUDE_DIRECTORIES(${ROSSNET_SOURCE_DIR}/modules/mobility/random-walk)
ENDIF(WITH_RANDOM_WALK)

IF(WITH_ROBOT_PHYSSYM)
	SET(HAVE_ROBOT_PHYSSYM_H ON)
	INCLUDE_DIRECTORIES(${ROSSNET_SOURCE_DIR}/modules/mobility/robot-physsym)
ENDIF(WITH_ROBOT_PHYSSYM)

FIND_PACKAGE(LibXml2 REQUIRED)

INCLUDE_DIRECTORIES(${LIBXML2_INCLUDE_DIR})

#FIND_PACKAGE(MPI REQUIRED)

#INCLUDE_DIRECTORIES(${MPI_INCLUDE_DIR})

ADD_SUBDIRECTORY(modules)
ADD_SUBDIRECTORY(kernel)
