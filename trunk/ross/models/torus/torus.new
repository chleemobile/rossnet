#include "torus.h"

tw_peid
mapping(tw_lpid gid)
{
	return (tw_peid) gid / g_tw_nlp;
}

void
torus_setup(nodes_state * s, tw_lp * lp)
{
  int i, j;
  int dim_N[N_dims+1];
  dim_N[0]=(int)lp->gid;

  // calculate my torus co-ordinates
  for (i=0; i<N_dims; i++)
    {
      s->dim_position[i] = dim_N[i]%dim_length[i];
      dim_N[i+1] = ( dim_N[i] - s->dim_position[i] )/dim_length[i];

      half_length[i] = dim_length[i]/2;
    }

  for (i=0; i<N_dims; i++)
    {
      s->node_queue_length[0][i] = 0;
      s->node_queue_length[1][i] = 0;
    }

  int factor[N_dims];
  factor[0]=1;
  for (i=1; i<N_dims; i++)
    {
      factor[i]=1;
      for (j=0; j<i; j++)
        factor[i]*=dim_length[j];
    }

  int temp_dim_pos[N_dims];
  for (i=0; i<N_dims; i++)
    temp_dim_pos[i] = s->dim_position[i];

  // calculate minus neighbour's lpID
  for (j=0; j<N_dims; j++)
    {
      temp_dim_pos[j] = (s->dim_position[j] -1 + dim_length[j])%dim_length[j];
      s->neighbour_minus_lpID[j]=0;
      for (i=0; i<N_dims; i++)
        s->neighbour_minus_lpID[j]+=factor[i]*temp_dim_pos[i];
      temp_dim_pos[j] = s->dim_position[j];
    }

  // calculate plus neighbour's lpID
  for (j=0; j<N_dims; j++)
    {
      temp_dim_pos[j] = (s->dim_position[j] + 1 + dim_length[j])%dim_length[j];
      s->neighbour_plus_lpID[j]=0;
      for (i=0; i<N_dims; i++)
        s->neighbour_plus_lpID[j]+=factor[i]*temp_dim_pos[i];
      temp_dim_pos[j] = s->dim_position[j];
    }

  // record LP time
  s->packet_counter = 0;
  s->next_available_time = 0;
}


void
torus_init(nodes_state * s, tw_lp * lp)
{
  tw_event *e;
  tw_stime ts;
  nodes_message *m;
  tw_lpid dst_lp;
  int i;

  /*
   * Set up the initial state for each LP (node)
   * according to the number of dimensions
   */
  torus_setup(s, lp);

  /*
   * Start a GENERATE event on each LP
   */

  /*  ts = tw_rand_exponential(lp->rng, MEAN_INTERVAL);
  e = tw_event_new(lp->gid, ts, lp);
  m = tw_event_data(e);
  m->type = GENERATE;

  m->dest_lp = lp->gid;
  tw_event_send(e);
  */

  // Send the packet out
  ts = tw_rand_exponential(lp->rng, 100000);
  e = tw_event_new(lp->gid, ts, lp);
  m = tw_event_data(e);
  m->type = SEND;
  m->transmission_time = PACKET_SIZE;
  
  // Set up random destination
  dst_lp = tw_rand_integer(lp->rng,0,N_nodes-1);
  int dim_N[N_dims];
  dim_N[0]=dst_lp;
    
  for (i=0; i<N_dims; i++)
    {
      m->dest[i] = dim_N[i]%dim_length[i];
      dim_N[i+1] = ( dim_N[i] - m->dest[i] )/dim_length[i];
    }

  // record start time
  m->travel_start_time = tw_now(lp);
  m->accumulate_queue_length = 0;
  
  // set up packet ID
  // each packet has a unique ID
  m->packet_ID = lp->gid + g_tw_nlp*s->packet_counter;
  
  m->dest_lp = dst_lp;
  tw_event_send(e);	


}


void
packet_arrive(nodes_state * s, tw_bf * bf, nodes_message * msg, tw_lp * lp)
{
  int i;
  tw_stime ts;
  tw_event *e;
  nodes_message *m;

  bf->c2 = 1;
  bf->c6 = 1;
  bf->c10 = 1;

    /*
     * If no packet is queueing, router is available now
     * if there are some packets queueing, then available time > tw_now(lp)
     * add one more MEAN_PROCESS to available time
     */
    
    /*
    if (s->next_available_time > tw_now(lp))
      {
	bf->c10 = 1;
	ts = s->next_available_time - tw_now(lp);
	s->next_available_time += MEAN_PROCESS;
      }
    else
      {
	bf->c10 = 0;
	ts = 0;
	msg->saved_available_time = s->next_available_time;
	s->next_available_time = tw_now(lp) + MEAN_PROCESS;
      }
    */
    
    msg->saved_available_time = s->next_available_time;
    s->next_available_time = max(s->next_available_time, tw_now(lp));
    ts = tw_rand_exponential(lp->rng, MEAN_PROCESS);
    s->next_available_time += ts;    

    e = tw_event_new(lp->gid, ts + s->next_available_time - tw_now(lp), lp);
    m = tw_event_data(e);
    m->type = PROCESS;
    
    //carry on the message info	
    for( i = 0; i < N_dims; i++ )
      m->dest[i] = msg->dest[i];
    m->dest_lp = msg->dest_lp;
    m->transmission_time = msg->transmission_time;
    
    m->source_dim = msg->source_dim;
    m->source_direction = msg->source_direction;
    
    m->packet_ID = msg->packet_ID;	  
    m->travel_start_time = msg->travel_start_time;
    
    m->accumulate_queue_length = msg->accumulate_queue_length;
   
    tw_event_send(e);
    //  }
}

void 
dimension_order_routing(nodes_state * s,nodes_message * msg, tw_lpid * dst_lp)
{
  int i;
  for( i = 0; i < N_dims; i++ )
    {
      if ( s->dim_position[i] - msg->dest[i] > half_length[i] )
	{
	  *dst_lp = s->neighbour_plus_lpID[i];
	  s->source_dim = i;
	  s->direction = 1;
	  break;
	}
      if ( s->dim_position[i] - msg->dest[i] < -half_length[i] )
	{
	  *dst_lp = s->neighbour_minus_lpID[i];
	  s->source_dim = i;
	  s->direction = 0;
	  break;
	}
      if (( s->dim_position[i] - msg->dest[i] <= half_length[i] )&&(s->dim_position[i] - msg->dest[i] > 0))
	{
	  *dst_lp = s->neighbour_minus_lpID[i];
	  s->source_dim = i;
	  s->direction = 0;
	  break;
	}
      if (( s->dim_position[i] - msg->dest[i] >= -half_length[i] )&&(s->dim_position[i] - msg->dest[i] < 0))
	{
	  *dst_lp = s->neighbour_plus_lpID[i];
	  s->source_dim = i;
	  s->direction = 1;
	  break;
	}
    }
  
}

void
packet_send(nodes_state * s, tw_bf * bf, nodes_message * msg, tw_lp * lp)
{
  int i;
  tw_lpid dst_lp;
  tw_stime ts;
  tw_event *e;
  nodes_message *m;

  ts = LINK_DELAY+msg->transmission_time;
  
  /*
   * Routing in the torus, start from the first dimension
   */
  
  if (lp->gid !=  msg->dest_lp )  
    {
      bf->c3 = 1;
      dimension_order_routing(s,msg,&dst_lp);
    }
  else
    {
      bf->c3 = 0;
      dst_lp = lp->gid;
    }
  
  e = tw_event_new(dst_lp, ts, lp);
  m = tw_event_data(e);
  m->type = ARRIVAL;
  
  // Carry on the message info
  for( i = 0; i < N_dims; i++ )
    m->dest[i] = msg->dest[i];
  m->dest_lp = msg->dest_lp;
  m->transmission_time = msg->transmission_time;
  
  m->source_dim = msg->source_dim;
  m->source_direction = msg->source_direction;
  
  m->packet_ID = msg->packet_ID;	  
  m->travel_start_time = msg->travel_start_time;

  m->accumulate_queue_length = msg->accumulate_queue_length;
  
  tw_event_send(e);
}


void
packet_process(nodes_state * s, tw_bf * bf, nodes_message * msg, tw_lp * lp)
{
  int i;
  tw_event *e;
  nodes_message *m;

  bf->c3 = 1;
  // One packet leaves the queue
  s->node_queue_length[msg->source_direction][msg->source_dim]--;
  
  if(lp->gid==msg->dest_lp)
    {
      // one packet arrives and dies
      bf->c3 = 0;
    }
  else
    {
      e = tw_event_new(lp->gid, MEAN_PROCESS, lp);
      m = tw_event_data(e);
      m->type = SEND;
      
      // Carry on the message info
      for( i = 0; i < N_dims; i++ )
	m->dest[i] = msg->dest[i];
      m->dest_lp = msg->dest_lp;
      m->transmission_time = msg->transmission_time;
      
      m->source_dim = msg->source_dim;
      m->source_direction = msg->source_direction;
      
      m->packet_ID = msg->packet_ID;	  
      m->travel_start_time = msg->travel_start_time;
      
      m->accumulate_queue_length = msg->accumulate_queue_length;

      tw_event_send(e);
      
    }
  
}

void 
packet_generate(nodes_state * s, tw_bf * bf, nodes_message * msg, tw_lp * lp)
{
  unsigned long long i;
  //int i;
  tw_lpid dst_lp;
  tw_stime ts;
  tw_event *e;
  nodes_message *m;


  // Send the packet out
  e = tw_event_new(lp->gid, 0, lp);
  m = tw_event_data(e);
  m->type = SEND;
  m->transmission_time = PACKET_SIZE;
  
  // Set up random destination
  dst_lp = tw_rand_integer(lp->rng,0,N_nodes-1);
  int dim_N[N_dims];
  dim_N[0]=dst_lp;
    
  for (i=0; i<N_dims; i++)
    {
      m->dest[i] = dim_N[i]%dim_length[i];
      dim_N[i+1] = ( dim_N[i] - m->dest[i] )/dim_length[i];
    }

  // record start time
  m->travel_start_time = tw_now(lp);
  m->accumulate_queue_length = 0;
  
  // set up packet ID
  // each packet has a unique ID
  m->packet_ID = lp->gid + g_tw_nlp*s->packet_counter;
  
  m->dest_lp = dst_lp;
  tw_event_send(e);	
    

  // One more packet is generating 
  s->packet_counter++;
  int index = floor(N_COLLECT_POINTS*(tw_now(lp)/g_tw_ts_end));
  N_generated_storage[index]++;

  // schedule next GENERATE event
  ts = tw_rand_exponential(lp->rng, MEAN_INTERVAL);	
  e = tw_event_new(lp->gid, ts, lp);
  m = tw_event_data(e);
  m->type = GENERATE;
  
  m->dest_lp = lp->gid;
  tw_event_send(e);

}


void
event_handler(nodes_state * s, tw_bf * bf, nodes_message * msg, tw_lp * lp)
{

  switch(msg->type)
    {
    case GENERATE:
      packet_generate(s,bf,msg,lp);
      break;
    case ARRIVAL:
      packet_arrive(s,bf,msg,lp);
      break;
    case SEND:
      packet_send(s,bf,msg,lp);
      break;
    case PROCESS:
      packet_process(s,bf,msg,lp);
      break;
    }
}

void
rc_event_handler(nodes_state * s, tw_bf * bf, nodes_message * msg, tw_lp * lp)
{
  int index = floor(N_COLLECT_POINTS*(tw_now(lp)/g_tw_ts_end));
  switch(msg->type)
    {
    case GENERATE:
      N_generated_storage[index]--;
      s->packet_counter--;
      tw_rand_reverse_unif(lp->rng);
      tw_rand_reverse_unif(lp->rng);
      break;
    case ARRIVAL:
      
      /*      if ( bf->c2 == 0 )
	      {
	      N_dropped--;
	      N_dropped_storage[index]--;
	      }
      else
      {
      */
      s->next_available_time = msg->saved_available_time;
      /*
	s->next_available_time = msg->saved_available_time;
	if ( bf->c6 == 0 )
	{
	N_finished--;
	  N_finished_storage[index]--;
	  total_time -= tw_now(lp) - msg->travel_start_time;	      
	  total_queue_length -= msg->accumulate_queue_length;
	  }
	  s->node_queue_length[msg->source_direction][msg->source_dim]--;
	  msg->accumulate_queue_length -=
	  s->node_queue_length[msg->source_direction][msg->source_dim];
      */
      //}
      break;
    case SEND:
      break;
    case PROCESS:
      s->node_queue_length[msg->source_direction][msg->source_dim]++;
      break;
    }
}

void
final(nodes_state * s, tw_lp * lp)
{

	/*	
	printf("lp %d events counter is %d processed is %d and arrival %d my sents is %d\n",
	       lp->gid,
	       s->counter,
	       s->processed,
	       s->arrivals, 
	       s->sents);
	*/
}

tw_lptype nodes_lps[] =
{
	{
		(init_f) torus_init,
		(event_f) event_handler,
		(revent_f) rc_event_handler,
		(final_f) final,
		(map_f) mapping,
		sizeof(nodes_state),
	},
	{0},
};

const tw_optdef app_opt [] =
{
	TWOPT_GROUP("Nodes Model"),
	TWOPT_UINT("memory", opt_mem, "optimistic memory"),
	TWOPT_END()
};


int
main(int argc, char **argv, char **env)
{
	int i;
	tw_opt_add(app_opt);
	tw_init(&argc, &argv);

	for (i=0; i<N_dims; i++)
	  N_nodes*=dim_length[i];

	nlp_per_pe = N_nodes/tw_nnodes()/g_tw_npe;
	g_tw_events_per_pe = nlp_per_pe/g_tw_npe + opt_mem;
	tw_define_lps(nlp_per_pe, sizeof(nodes_message), 0);

	for(i = 0; i < g_tw_nlp; i++)
	  tw_lp_settype(i, &nodes_lps[0]);

	tw_run();

	if(tw_ismaster())
	{
		printf("\nTorus Network Model Statistics:\n");

		printf("\t%-50s %11lld\n", "Number of nodes", 
			nlp_per_pe * g_tw_npe * tw_nnodes());
	}

	unsigned long long total_finished_storage[N_COLLECT_POINTS];
	unsigned long long total_dropped_storage[N_COLLECT_POINTS];
	unsigned long long total_generated_storage[N_COLLECT_POINTS];
	unsigned long long wait_length;
	tw_stime total_time_sum;

	for( i=0; i<N_COLLECT_POINTS; i++ )
	  {
	    MPI_Reduce( &N_dropped_storage[i], &total_dropped_storage[i],1, 
			MPI_LONG_LONG, MPI_SUM, 0, MPI_COMM_WORLD);
	    MPI_Reduce( &N_finished_storage[i], &total_finished_storage[i],1,
                        MPI_LONG_LONG, MPI_SUM, 0, MPI_COMM_WORLD);
	    MPI_Reduce( &N_generated_storage[i], &total_generated_storage[i],1,
                        MPI_LONG_LONG, MPI_SUM, 0, MPI_COMM_WORLD);
	  }

	MPI_Reduce( &total_queue_length, &wait_length,1, 
		    MPI_LONG_LONG, MPI_SUM, 0, MPI_COMM_WORLD);
	MPI_Reduce( &total_time, &total_time_sum,1, 
		    MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);

	for( i=1; i<N_COLLECT_POINTS; i++ )
	  {
	    total_dropped_storage[i]+=total_dropped_storage[i-1];
	    total_finished_storage[i]+=total_finished_storage[i-1];
	    total_generated_storage[i]+=total_generated_storage[i-1];
	  }

	if(tw_ismaster())
	  {
	    printf("\n ****************** \n");
	    printf("\n Total drop:           %lld; \n",
		   total_dropped_storage[N_COLLECT_POINTS-1]);
	    printf("\n total finish:         %lld; \n",
		   total_finished_storage[N_COLLECT_POINTS-1]);
	    printf("\n total generate:       %lld; \n",
		   total_generated_storage[N_COLLECT_POINTS-1]);
	    printf("\n total wait length:    %lf; \n",
		   (double)wait_length/total_finished_storage[N_COLLECT_POINTS-1]);
	    printf("\n average travel time:  %lf; \n\n",
		   total_time_sum/total_finished_storage[N_COLLECT_POINTS-1]);
	    
	    for( i=0; i<N_COLLECT_POINTS; i++ )
	      {
		printf(" %d ",i*100/N_COLLECT_POINTS);
		printf("drop: %lld; finish: %lld; generate: %lld;\n",
		       total_dropped_storage[i],
		       total_finished_storage[i],
		       total_generated_storage[i] );
		       
	      }
	  }

	tw_end();
	return 0;
}
